# -*- coding: utf-8 -*-
"""Data visualization.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bONgR6JOM4x8Szblt3ZVBZXn7rYq5So7

# Basic loading
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
import matplotlib.pyplot as plt # data visualization
import seaborn as sns # statistical data visualization
# %matplotlib inline

import warnings

warnings.filterwarnings('ignore')

# get data from drive
from google.colab import drive
drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/drive/My Drive/Colab Notebooks/

df = pd.read_csv('Preprocessed_data.csv')
coffee_df=pd.read_csv('Coffee_data.csv')
rose_df=pd.read_csv('Rose_df.csv')
pomelo_df=pd.read_csv('Pomelo_df.csv')
ginger_df=pd.read_csv('Ginger_df.csv')
squash_df=pd.read_csv('Squash_df.csv')

df.info()
df.isnull().sum()

print(df.columns)

#df = df.astype({'Sales': int, 'Price': int, 'Rating record': int, 'Discount(%)': int})

import matplotlib.dates as mdates  # add import statement for DateFormatter

#change Sales to integer type
df['Sales'] = df['Sales'].astype(int)
#change Date to datetime type
from datetime import datetime
df['New_date']=pd.to_datetime(df['Date'], format='%Y/%m/%d',errors = 'coerce')
df = df.dropna(subset=['Date'])

df=df.drop(columns=['Date'])
df.columns = df.columns.str.replace('New_date', 'Date')

daily_sales = df.groupby('Date')['Sales'].sum().reset_index()
#daily_sales['Sales_rounded'] = round(daily_sales['Sales']/ 1000000, 2) * 1000
#daily_sales

"""# (Total sales) With value on each point """

# create a line plot of sales by day
plt.plot(daily_sales['Date'], daily_sales['Sales_rounded'], marker='o')

# show the sales value on each point of the line
for x, y in zip(daily_sales['Date'], daily_sales['Sales_rounded']):
    plt.text(x, y, y, ha='center', va='bottom', fontsize=8)

# set the x-axis format to display dates in yyyy/mm/dd format
date_format = mdates.DateFormatter('%d/%m')
plt.gca().xaxis.set_major_formatter(date_format)
plt.gcf().autofmt_xdate()

# add x and y axis labels and a title
plt.xlabel('Date')
plt.ylabel('Total sales')
plt.title('Total sales by Day')

# increase the size of the markers and line
plt.rcParams['lines.markersize'] = 6
plt.rcParams['lines.linewidth'] = 2


# set the figure size to 10 inches wide by 6 inches tall
plt.figure(figsize=(100, 6))

# show the plot
plt.show()

"""# (Total sales) Without value on each point"""

df

# create a line plot of sales by day
plt.plot(daily_sales['Date'], daily_sales['Sales'], marker='o',color='brown')

# set the x-axis format to display dates in yyyy/mm/dd format
date_format = mdates.DateFormatter('%d/%m')
plt.gca().xaxis.set_major_formatter(date_format)
plt.gcf().autofmt_xdate()

# add x and y axis labels and a title
plt.xlabel('Date')
plt.ylabel('Total sales')
plt.title('Total sales by Day')

# increase the size of the markers and line
plt.rcParams['lines.markersize'] = 3
plt.rcParams['lines.linewidth'] = 2


# set the figure size to 10 inches wide by 6 inches tall
plt.figure(figsize=(10, 6))

# save the plot as a PNG image
plt.savefig('Total_sales_by_day.png', dpi=600, bbox_inches='tight')

# show the plot
plt.show()

"""Save graph to doc"""

!pip install python-docx
import docx

plt.savefig('my_plot.png')

# Create a new Word document
doc = docx.Document()

# Add a new paragraph to the document
doc.add_paragraph('Here is my plot:')

# Add the plot image to the document
doc.add_picture('my_plot.png')

# Save the Word document
doc.save('my_doc.docx')

"""#Category sales"""

# Group the data by category and date, and calculate the daily sales
category_all = df.groupby(['Category', pd.Grouper(key='Date', freq='D')])['Sales'].sum().reset_index()

# Create a line graph with a legend note
fig, ax = plt.subplots(figsize=(10, 6))

for category in category_all['Category'].unique():
    data = category_all[category_all['Category'] == category]
    ax.plot(data['Date'], data['Sales'], marker='o', label=category)

ax.set_title('Daily Sales by Category')
ax.set_xlabel('Date')
ax.set_ylabel('Sales (items)')
ax.legend(title='Category', loc='upper left', bbox_to_anchor=(1.02, 1))
plt.rcParams['lines.markersize'] = 3

plt.show()

category_all

grouped_sales = df.groupby(['Category'])['Sales'].sum()
grouped_sales_df = grouped_sales.reset_index()

grouped_count = df.groupby(['Category'])['Sales'].count()
grouped_count_df = grouped_count.reset_index()

grouped_count_df

grouped_sales_df

# Create a figure and axis object
fig, ax = plt.subplots()

# Create a bar graph
ax.bar(grouped_sales_df['Category'], grouped_sales_df['Sales'], color='brown')

# Set the title and axis labels
ax.set_title('Total sales by category')
ax.set_xlabel('Category')
ax.set_ylabel('Sales (items)')

# Add labels with values above the bars
for i, v in enumerate(grouped_sales_df['Sales']):
    ax.text(i, v+1, str(v), ha='center')

# Display the graph
plt.show()

# Create a figure and axis object
fig, ax = plt.subplots()

# Create a bar graph
ax.bar(grouped_count_df['Category'], grouped_count_df['Sales'], color='brown')

# Set the title and axis labels
ax.set_title('Number of Sales data collected by category')
ax.set_xlabel('Category')
ax.set_ylabel('Number of sales data collected')

# Add labels with values above the bars
for i, v in enumerate(grouped_count_df['Sales']):
    ax.text(i, v+1, str(v), ha='center')

# Display the graph
plt.show()

"""# Sales difference"""

# Create a gradient color map
from matplotlib.colors import LinearSegmentedColormap
import matplotlib.dates as dates

cmap = LinearSegmentedColormap.from_list('mycmap', ['#D21312', '#54B435'])

# Group the data by date and calculate the daily sales
daily_sales = df.groupby(pd.Grouper(key='Date', freq='D'))['Sales'].sum().reset_index()

# Calculate the difference in sales between consecutive days
daily_sales['Sales_diff'] = daily_sales['Sales'].diff()

# Create a bar chart of sales difference by day
fig, ax = plt.subplots()
ax.bar(daily_sales['Date'], daily_sales['Sales_diff'], color=cmap(daily_sales['Sales_diff']/daily_sales['Sales_diff'].max()))
ax.set_title('Sales Difference by Day')
ax.set_xlabel('Date')
ax.set_ylabel('Sales Difference')

# Set date format
date_format = '%d/%m'
ax.xaxis.set_major_formatter(dates.DateFormatter(date_format))

# Add line for average discount
# discount = df['Discount']
# ax.axhline(y=0, color='black', linestyle='-', linewidth=1)
# ax.axhline(y=discount * 100, color='red', linestyle='--', linewidth=1)
# ax.text(-0.5, discount * 100 + 5, 'Avg. Discount: {:.2f}%'.format(discount * 100), color='red', fontsize=10)

plt.show()

"""# Top lists """

ID_sales = df.groupby(['Product_ID','Category'])['Sales'].sum()
ID_sales_df = ID_sales.reset_index()
ID_sales_df

# Sort data by sales and get top 10 sellers
ID_sorted = ID_sales_df.sort_values('Sales', ascending=True)
ID_top10 = ID_sorted.tail(10)

# Create plot
fig, ax = plt.subplots()
ax.barh(ID_top10['Product_ID'], ID_top10['Sales'],color='orange')

# Set plot title and labels
ax.set_title('Top 10 Best-Seller')
ax.set_xlabel('Total sales (items)')
ax.set_ylabel('Product ID')

# Add data labels
for i, v in enumerate(ID_top10['Sales']):
    ax.text(v + 5 , i - 0.1, str(v), color='black', fontsize=8)

# Show plot
plt.show()

for category in category_all['Category'].unique():
    ID_top10 = category_all[category_all['Category'] == category]

# Sort data by sales and get top 10 sellers
ID_sorted = ID_sales_df.sort_values('Sales', ascending=True)
ID_top10 = ID_sorted.tail(10)
category_note= ID_top10['Category']

# Define colors for each category
colors = {'Coffee': 'brown', 'Pomelo': 'green', 'Squash': 'blue', 'Ginger': 'orange', 'Rose':'red'}

# Create plot
fig, ax = plt.subplots()
for index, row in ID_top10.iterrows():
    product_id = row['Product_ID']
    category = ID_sorted.loc[ID_sorted['Product_ID'] == product_id, 'Category'].iloc[0]
    color = colors[category]
    ax.barh(product_id, row['Sales'], color=color, label=category)

# Set plot title and labels
ax.set_title('Top 10 Best Seller')
ax.set_xlabel('Total sales (items)')
ax.set_ylabel('Product ID')
ax.set_title('Top 10 Best-Seller')
ax.legend(title='Category', loc='upper left', bbox_to_anchor=(1.02, 1))

# Add data labels
for i, v in enumerate(ID_top10['Sales']):
    ax.text(v + 5 , i - 0.1, str(v), color='black', fontsize=8)

# Show plot
plt.show()

ID_bot10 = ID_sorted.head(10)

# Create plot
fig, ax = plt.subplots()
ax.barh(ID_bot10['Product_ID'], ID_bot10['Sales'],color='maroon')

# Set plot title and labels
ax.set_title('Top 10 Worst-Seller')
ax.set_xlabel('Total sales (items)')
ax.set_ylabel('Product ID')

# Add data labels
for i, v in enumerate(ID_bot10['Sales']):
    ax.text(v + 3, i - 0.1, str(v), color='black', fontsize=8)

# Show plot
plt.show()